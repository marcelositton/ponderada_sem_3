#include <iostream>
#include <unordered_map>
#include <string>
#include <cassert> // Adicionando a biblioteca cassert
using namespace std;

class DHT {
public:
    void insert(string key, string value) {
        data[key] = value;
    }

    string get(string key) {
        return data[key];
    }

    void remove(string key) {
        data.erase(key);
    }

private:
    unordered_map<string, string> data;
};

int main() {
    // Implementação da DHT
    DHT dht;
    dht.insert("key1", "value1");
    cout << dht.get("key1") << endl;
    dht.remove("key1");

    // Testes da DHT
    // Caso de teste 1: Inserir um valor e buscar o mesmo valor
    dht.insert("key2", "value2");
    assert(dht.get("key2") == "value2");

    // Caso de teste 2: Inserir um valor e depois removê-lo
    dht.insert("key3", "value3");
    dht.remove("key3");
    assert(dht.get("key3") == "");

    // Caso de teste 3: Inserir vários valores e buscar um deles
    dht.insert("key4", "value4");
    dht.insert("key5", "value5");
    assert(dht.get("key4") == "value4");

    // Caso de teste 4: Inserir vários valores e remover um deles
    dht.insert("key6", "value6");
    dht.remove("key6");
    assert(dht.get("key6") == "");

    // Caso de teste 5: Inserir vários valores e buscar um que não existe
    dht.insert("key7", "value7");
    dht.insert("key8", "value8");
    assert(dht.get("key9") == "");

    cout << "All tests passed!" << endl;
    return 0;
}

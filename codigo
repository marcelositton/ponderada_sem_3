#include <iostream>
#include <list>
#include <string>
#include <vector>
class ProductHashTable {
private:
    struct Product {
        int id;
        std::string description;
    };
    static const int hashTableSize = 10;
    std::list<Product> table[hashTableSize];
    int hashFunction(int id) {
        return id % hashTableSize;
    }
public:
    void insertProduct(int id, std::string description) {
        int index = hashFunction(id);
        auto& products = table[index];
        for (auto& prod : products) {
            if (prod.id == id) {
                prod.description = description;
                return;
            }
        }
        products.push_back({id, description});
    }
    std::string getProduct(int id) {
        int index = hashFunction(id);
        auto& products = table[index];
        for (auto& prod : products) {
            if (prod.id == id) {
                return prod.description;
            }
        }
        return "Produto não encontrado";
    }
    void removeProduct(int id) {
        int index = hashFunction(id);
        auto& products = table[index];
        for (auto it = products.begin(); it != products.end(); ++it) {
            if (it->id == id) {
                products.erase(it);
                return;
            }
        }
    }
    void printTable() {
        for (int i = 0; i < hashTableSize; ++i) {
            std::cout << "Índice " << i << ": ";
            for (auto& prod : table[i]) {
                std::cout << "{" << prod.id << ", " << prod.description << "} ";
            }
            std::cout << std::endl;
        }
    }
};
int main() {
    ProductHashTable ht;
    // Teste 1: Adicionar e buscar
    ht.insertProduct(3, "Caneta");
    std::cout << "Teste 1 - " << ht.getProduct(3) << std::endl;
    // Teste 2: Atualizar
    ht.insertProduct(2, "Papel");
    std::cout << "Teste 2 - " << ht.getProduct(2) << std::endl;
    // Teste 3: Remover
    std::cout << "Teste 3 - Antes de Remover: " << ht.getProduct(3) << std::endl;
    ht.removeProduct(3);
    std::cout << "Teste 3 - Depois de Remover: " << ht.getProduct(3) << std::endl;
    // Teste 4: Busca inexistente
    std::cout << "Teste 4 - " << ht.getProduct(15) << std::endl;
    // Teste 5: Tabela Hash
    std::cout << "Teste 5 - Impressão da Tabela: " << std::endl;
    ht.printTable();

    return 0;
}
